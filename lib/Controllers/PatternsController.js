/**
 * PTVTimetableAPIVersion3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class PatternsController {
    /**
     * View the stopping pattern for a specific trip/service run
     *
     * @param {int} runId Identifier of a trip/service run; values returned by Runs API -
     * /v3/route/{route_id} and Departures API
     * @param {RouteType63Enum} routeType Number identifying transport mode; values returned via
     * RouteTypes API
     * @param {array} expand Objects to be returned in full (i.e. expanded) - options include: all,
     * stop, route, run, direction, disruption. By default disruptions are
     * expanded.
     * @param {int} stopId (optional) Filter by stop_id; values returned by Stops API
     * @param {dateTime} dateUtc (optional) Filter by the date and time of the request (ISO 8601
     * UTC format)
     * @param {string} token (optional) Please ignore
     * @param {string} devid (optional) Your developer id
     * @param {string} signature (optional) Authentication signature for request
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getPatternsGetPatternByRun(runId,
        routeType,
        expand,
        stopId,
        dateUtc,
        token,
        devid,
        signature,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v3/pattern/run/{run_id}/route_type/{route_type}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            run_id: runId,
            route_type: (routeType !== null) ? routeType : null,
        });

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            expand: (expand !== null) ? expand : null,
            stop_id: stopId,
            date_utc: _apiHelper.stringifyDateTime(dateUtc, 'rfc3339'),
            token,
            devid,
            signature,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'V3StoppingPattern');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'V3ErrorResponseException');
                    mappedObject.reason = 'Invalid Request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid Request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'V3ErrorResponseException');
                    mappedObject.reason = 'Access Denied';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Access Denied', errorCode: 403, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = PatternsController;
