/**
 * PTVTimetableAPIVersion3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class SearchController {
    /**
     * View stops, routes and myki ticket outlets that match the search term
     *
     * @param {string} searchTerm Search text (note: if search text is numeric and/or less than 3
     * characters, the API will only return routes)
     * @param {array} routeTypes (optional) Filter by route_type; values returned via RouteTypes
     * API (note: stops and routes are ordered by route_types specified)
     * @param {double} latitude (optional) Filter by geographic coordinate of latitude
     * @param {double} longitude (optional) Filter by geographic coordinate of longitude
     * @param {double} maxDistance (optional) Filter by maximum distance (in metres) from location
     * specified via latitude and longitude parameters
     * @param {bool} includeAddresses (optional) Placeholder for future development; currently
     * unavailable
     * @param {bool} includeOutlets (optional) Indicates if outlets will be returned in response
     * (default = true)
     * @param {bool} matchStopBySuburb (optional) Indicates whether to find stops by suburbs in the
     * search term (default = true)
     * @param {bool} matchRouteBySuburb (optional) Indicates whether to find routes by suburbs in
     * the search term (default = true)
     * @param {string} token (optional) Please ignore
     * @param {string} devid (optional) Your developer id
     * @param {string} signature (optional) Authentication signature for request
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static searchSearch(searchTerm,
        routeTypes,
        latitude,
        longitude,
        maxDistance,
        includeAddresses,
        includeOutlets,
        matchStopBySuburb,
        matchRouteBySuburb,
        token,
        devid,
        signature,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/v3/search/{search_term}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            search_term: searchTerm,
        });

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            route_types: (routeTypes !== null) ? routeTypes : null,
            latitude,
            longitude,
            max_distance: maxDistance,
            include_addresses: includeAddresses,
            include_outlets: includeOutlets,
            match_stop_by_suburb: matchStopBySuburb,
            match_route_by_suburb: matchRouteBySuburb,
            token,
            devid,
            signature,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                let response = '';
                if (_context.response.body) {
                    response = JSON.parse(_context.response.body);
                }
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'V3SearchResult');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'V3ErrorResponseException');
                    mappedObject.reason = 'Invalid Request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid Request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 403) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(response, 'V3ErrorResponseException');
                    mappedObject.reason = 'Access Denied';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Access Denied', errorCode: 403, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = SearchController;
